1 前端界面 文档
2 前端验证 数据库搭建
3 服务器基本架构, 前后端交互接口设计
4 安全架构设计

OTP:2和4共同完成



## 如何运行这三份代码

以下是运行 `init_db.py`, `server.py`, 和 `client.py` 的步骤，确保所有文件在同一目录（例如 `code`）下运行：

1. **准备环境**:
   - 确保安装 Python 3 和所需库：
     ```bash
     pip3 install pyotp
     ```
   - 将 `init_db.py`, `server.py`, 和 `client.py` 保存在同一目录（例如 `code`）。

2. **初始化数据库 (`init_db.py`)**:
   - 运行以下命令创建 `storage.db` 并插入管理员账户：
     ```bash
     cd code
     python3 init_db.py
     ```
   - 确认输出：`Database initialized with admin user at: /path/to/code/storage.db`。
   - 检查目录下是否生成 `storage.db`。

3. **启动服务器 (`server.py`)**:
   - 在一个终端运行：
     ```bash
     python3 server.py
     ```
   - 确认输出：`Server running on localhost:9999`。
   - 保持终端运行。

4. **运行客户端 (`client.py`)**:
   - 在另一个终端运行：
     ```bash
     python3 client.py
     ```
   - 测试将自动执行并输出结果。

**注意**:
- 确保所有命令在同一目录运行，避免路径问题。
- 若需重新测试，删除旧的 `storage.db`（`rm storage.db`）并再次运行 `init_db.py`。

---

## 文件说明：已完成与未完成的工作

### 已完成的工作

#### 核心功能 (Section 5)
1. **用户管理 (Core Functionality 1)**  
   - **注册用户 (1.a)**:
     - 支持用户名和密码注册，用户名唯一性检查通过。
     - 密码使用 `hashlib.sha256` 哈希，符合要求。
     - 实现：`handle_register` 检查重复用户名并插入新用户。
   - **登录 (1.b)**:
     - 支持用户名、密码和 OTP 登录，验证正确。
     - 实现：`handle_login` 检查密码哈希和 OTP。
   - **密码重置 (1.c)**:
     - 支持用户重置密码，验证旧密码后更新。
     - 实现：`handle_reset_password` 更新 `users` 表。

2. **数据加密 (Core Functionality 2)**  
   - **上传 (2.a)**:
     - 支持文件上传，服务器存储数据。
     - 实现：`handle_upload` 接收 base64 编码数据。
   - **下载 (2.b)**:
     - 支持文件下载，返回数据并由客户端解码。
     - 实现：`handle_download` 返回 base64 数据。

3. **访问控制 (Core Functionality 3)**  
   - **用户操作自己的文件 (3.a)**:
     - 支持上传、下载、编辑、删除自己的文件，权限验证通过。
     - 实现：`handle_upload`, `handle_download`, `handle_edit_file`, `handle_delete_file` 检查 `owner`。
   - **文件分享 (3.b)**:
     - 支持分享文件给指定用户，共享用户可下载。
     - 实现：`handle_share` 插入分享记录，`handle_download` 检查权限。
   - **未授权用户无法访问 (3.c)**:
     - 未授权用户下载返回错误。
     - 实现：`handle_download` 验证身份。

4. **日志审计 (Core Functionality 4)**  
   - **记录关键操作 (4.a)**:
     - 所有操作（登录、注册、上传等）记录到 `logs` 表。
     - 实现：`log_action` 存储日志。
   - **不可否认 (4.a.i)**:
     - 日志存储在服务器端，用户无法修改。
   - **管理员查看 (4.b)**:
     - 管理员可查看所有日志。
     - 实现：`handle_view_logs` 返回日志列表。

5. **通用安全保护 (Core Functionality 5)**  
   - **文件名验证 (5.a)**:
     - 检查文件名合法性，拒绝非法输入（如 `../`）。
     - 实现：`handle_upload` 使用正则表达式验证。
   - **SQL 注入防护 (5.b)**:
     - 使用参数化查询防止注入。
     - 实现：所有数据库操作使用 `sqlite3` 参数化。

#### 扩展功能 (Section 5)
- **多因子认证 (MFA - OTP) (Extended Functionality 1)**:
  - 支持 OTP 验证，注册时生成密钥，登录时验证。
  - 实现：`handle_register` 和 `handle_login` 使用 `pyotp`。

#### 其他要求
- **命令行运行 (Section 4)**:
  - 服务器和客户端为命令行程序。
- **Python 和 SQLite (Section 6)**:
  - 使用 Python 和 SQLite 实现。

---

### 未完成的工作

#### 核心功能 (Section 5)
1. **数据加密 (Core Functionality 2)**  
   - **适当的加密系统 (2.a.i)**:
     - 未实现：当前使用 base64 编码，未使用加密算法（如 AES）。
     - 需改进：客户端使用 `cryptography` 库加密文件。
   - **密钥管理 (2.a.i)**:
     - 未实现：密钥未在客户端生成或本地存储。
     - 需添加：客户端生成并保存加密密钥。
   - **服务器不读明文 (2.a.ii)**:
     - 部分未完成：数据为 base64，服务器可解码。
     - 需改进：确保数据为加密格式。
   - **客户端解密 (2.b)**:
     - 未实现：客户端仅解码 base64，未解密。
     - 需改进：客户端实现解密功能。

#### 命令行交互 (Section 4)
- **交互式命令行菜单**:
  - 未实现：当前为自动化测试脚本，用户无法手动操作。
  - 需改进：提供命令行菜单，支持手动输入用户名、密码、文件名等。

#### 提交要求 (Sections 7-9)
- **部署文档 (Section 9)**:
  - 未实现：无 Windows 11 部署步骤文档。
  - 需编写：包含安装 Python、依赖库和运行步骤。
- **代码注释 (Section 9)**:
  - 未完全实现：代码有部分注释，但不够详细。
  - 需添加：为每个函数和关键代码段添加完整说明。
- **报告 (Section 7)**:
  - 未实现：需团队完成，包括威胁模型、算法设计等。
- **演示视频 (Section 8)**:
  - 未实现：需团队录制，展示功能。

---

### 总结

#### 已完成
- **核心功能**：
  - 用户管理：注册、登录、密码重置。
  - 数据加密：上传和下载（base64 模拟）。
  - 访问控制：操作自己的文件（上传/下载/编辑/删除）、分享、权限限制。
  - 日志审计：记录操作、管理员查看。
  - 通用安全保护：文件名验证、SQL 注入防护。
- **扩展功能**：
  - OTP 认证。
- **技术要求**：
  - Python 和 SQLite。
  - 命令行运行（自动化测试）。

#### 未完成
- **核心功能**：
  - 真正的文件加密和密钥管理。
- **命令行交互**：
  - 交互式菜单。
- **提交要求**：
  - 部署文档、详细代码注释、报告、演示视频。

---

你的代码已实现所有功能性要求，只需添加真实加密和交互式界面即可完全符合项目标准。当前测试结果表明服务器和客户端运行正常，是个很好的起点！如果需要进一步完善（例如加密或交互式客户端），请告诉我！